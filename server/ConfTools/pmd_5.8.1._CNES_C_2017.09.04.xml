<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

CNES PMD Configuration file. 
Plugin PMD version 5.8.1
Date : 2017.09.04
Development level : C
CODING RULES FOR JAVA LANGUAGE - RNC-CNES-Q-HB-80-527 - Version 8.0

-->
<ruleset name="CNES"
    xmlns="http://pmd.sf.net/ruleset/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>
  CNES Configuration file.
  </description>
  <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces"/>  
  <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
  <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/>
  <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/>
  <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/>
  <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/>
  <rule ref="rulesets/java/design.xml/CloseResource"/>
  <rule ref="rulesets/java/design.xml/NonStaticInitializer"/>
  <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
  <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
  <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
  <rule ref="rulesets/java/design.xml/BadComparison"/>  
  <rule ref="rulesets/java/design.xml/EqualsNull"/>
  <rule ref="rulesets/java/design.xml/ConfusingTernary"/>
  <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
  <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
  <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale"/>
  <rule ref="rulesets/java/design.xml/ImmutableField"/>
  <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions"/>
  <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
  <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>
  <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
  <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
  <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>
  <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
  <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/>
  <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
  <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn"/>
  <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
  <rule ref="rulesets/java/design.xml/UncommentedEmptyMethodBody"/>
  <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"/>
  <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
  <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
  <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
  <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
  <rule ref="rulesets/java/design.xml/SingularField"/>
  <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
  <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>
  <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
  <rule ref="rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable"/>
  <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException"/>
  <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
  <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation"/>
  <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger"/>
  <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal"/>
  <rule ref="rulesets/java/logging-java.xml/SystemPrintln"/>
  <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace"/>
  <rule ref="rulesets/java/logging-java.xml/GuardLogStatementJavaUtil"/>
  <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals"/>
  <rule ref="rulesets/java/strings.xml/UseStringBufferLength"/>  
  <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck"/>
  <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
  <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>
  <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/>
  <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator"/>
  <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
  <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
  <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/>
  <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
  <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
  <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
  <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal"/>
  <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal"/>
  <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops"/>
  <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
  <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>
  <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>
  <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
  <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
  <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
  <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
  <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/>
  <rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
  <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
  <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
  <rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
  <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
  <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
  <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
  <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>
  <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
  <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
  <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
  <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
  <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
  <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
  <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
  <rule ref="rulesets/java/basic.xml/EmptyInitializer"/>
  <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
  <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
  <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
  <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray"/>
  <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly"/>
  <rule ref="rulesets/java/coupling.xml/LooseCoupling"/>
  <!--<rule ref="rulesets/java/coupling.xml/LawOfDemeter"/>-->
  <rule ref="rulesets/java/coupling.xml/LoosePackageCoupling"/>
  <rule ref="rulesets/java/imports.xml/DuplicateImports"/>  
  <rule ref="rulesets/java/imports.xml/UnusedImports"/>
  <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor"/>
  <rule ref="rulesets/java/controversial.xml/NullAssignment"/>
  <rule ref="rulesets/java/controversial.xml/OnlyOneReturn"/>
  <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/>
  <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/>
  <rule ref="rulesets/java/controversial.xml/DefaultPackage"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode"/>
  <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>
  <rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine"/>
  <rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters"/>  
  <rule ref="rulesets/java/controversial.xml/UseConcurrentHashMap"/>
  <rule ref="rulesets/java/naming.xml/ShortVariable"/>
  <!--<rule ref="rulesets/java/naming.xml/LongVariable"/>-->
  <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
  <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/AbstractNaming"/>
  <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
  <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
  <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
  <rule ref="rulesets/java/naming.xml/ShortClassName"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
  <rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging"/> 
  <rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger"/>  
  <rule ref="rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging"/>
  <rule ref="rulesets/java/logging-jakarta-commons.xml/GuardLogStatement"/>
  <rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
  <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
  <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
  <rule ref="rulesets/java/comments.xml/CommentRequired"/>
  <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
    <properties>
        <property name="reportLevel" value="15"/>
    </properties>
  </rule>
  <rule ref="rulesets/java/codesize.xml/ModifiedCyclomaticComplexity">
    <properties>
        <property name="reportLevel" value="12"/>
    </properties>
  </rule>
  <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength">
    <properties>
        <property name="minimum" value="80"/>
    </properties>
  </rule>
</ruleset>